#!/usr/bin/env python
# -*- coding: utf-8 -*-

#==============================================================================
# ラジコン・カーを付属のリモコンで制御するブリッジ用のＧＵＩプログラム
#                                                       GuiBrdgRcV2.py Ver.2.0
#                                                       fan4fun2rc 23 Mar. 2022
#------------------------------------------------------------------------------
#　V1:ラジコン・カー付属のリモコンを使用してRosBrdRc.pyでＲＯＳのトピック/cmd_velを
#　   配信し、いい感じで走らせることが出来るようになったが表示のＧＵＩが欲しいので、
#　   今回、GuiBrdgRc.pyを作成し表示と指示が出せるようにする。
#　V2:リモコンの操作仕様を変更し、スティックを離した時に速度を保持する仕様からストップ
#　   するように変更する。そこでV2では、スティックを押した時の速度をプリセット出来る
#　   ようにＧＵＩも変更する。
#
#【仕様】
#　・現在の速度指示情報はRosBrdgRcGuiV2.pyから関数がコールされ表示用のテキスト
#　　ボックスの値を更新する
#　・緊急停止用に並進速度と回転速度を共にゼロとするボタンを設ける
#　・テキストボックスに設定された速度情報はラベルをクリックすることで、事前に登録
#　　されたRosBrdgRcGuiV2.pyの関数をコールバックする
#　・テキストボックスに設定されたプリセット値はラベルをクリックすることで、事前に登録
#　　されたRosBrdgRcGuiV2.pyの関数をコールバックする
#
#【関数概要】
#　１．左右にGUIのパーツを配置するフレームを作成する関数：labelFrame(f, tx, col)
#　２．表示や設定するテキストボックスとボタンを作成する関数：editButton(f,r,c,t,b)
#　３．ラベルをクリックした時に速度情報を送信するコールバック関数：sndSpeed(x,z,px,pz)
#　４．GUIを構成する実質のメイン処理関数：guiApp()
#　５．現在速度のテキストボックスに表示するセッター関数：setSpeed(x,z,px,pz)
#　６．速度情報が変更されたときに通知する関数を設定する関数：setCallbackSpeed(fn)
#　７．速度情報がコールバック設定されて無い時にprintで代用する関数：prints(x,z,px,pz)
#　８．メイン処理関数：main()
#
#【リビジョン・ヒストリ】
#　・V1.0-2022/03/22:GuiRcTestV3.pyから改変してコーディング開始
#　・V2.0-2022/03/23:GuiBrdgRc.pyからリモコンの操作仕様変更
#==============================================================================

#------------------------------------------------------------------------------
#　インポートするライブラリの宣言
#------------------------------------------------------------------------------
import Tkinter as tk    # python3系では、<import tkinter as tk>
import ttk              # python3系では、<from tkinter import ttk>

#==============================================================================
# １．左右にGUIのパーツを配置するフレームを作成する関数：labelFrame(f, tx, col)
#   ＜引数  ｆ：フレームを配置するフレームのID＞
#   ＜引数  tx：フレームに表示するテキスト＞
#   ＜引数 col：フレームを配置するグリッドの列番号＞
#   ＜返値  lf：作成したフレームのID＞
#------------------------------------------------------------------------------
#　・左右にGUIのパーツを配置するフレームを作成
#　・左右を区別するために表示するテキストと列情報を引数とし
#　　作成したフレームのIDを返り値としてリターンする
#==============================================================================
def labelFrame(f, tx, col):
    lf = tk.LabelFrame(f, width=0, height=0, text=tx, bg="white", bd=5,
                            relief="groove", labelanchor="s", padx=5, pady=5)
    lf.grid(row=0, column=col, sticky=tk.NSEW)
    #
    # ウィンドを拡大縮小時に一緒に伸縮する
    #  行と列を指定する
    #
    lf.columnconfigure(0, weight=1)
    lf.columnconfigure(1, weight=1)
    lf.columnconfigure(2, weight=1)
    lf.columnconfigure(3, weight=1)
    lf.columnconfigure(4, weight=1)
    lf.rowconfigure(0, weight=1)
    lf.rowconfigure(1, weight=1)
    return lf


#==============================================================================
# ２．表示や設定するテキストボックスとボタンを作成する関数：editButton(f,r,c,t,b)
#   ＜引数  f：部品を配置するフレームのID＞
#   ＜引数  r：テキストボックスを配置する行を指定する＞
#   ＜引数  c：テキストボックスを配置する列を指定する＞
#   ＜引数  t：作成したラベルに表示する文字列を指定する＞
#   ＜引数  b：作成したラベルの背景色を指定する＞
#   ＜返値 ev：作成したテキストボックスの文字列変数へのオブジェクト＞
#------------------------------------------------------------------------------
#　・エディットボックスの作成
#　・エディットボックスのラベルを表示するボタンの作成
#==============================================================================
def editButton(f, r, c, t, b):
    #
    # エディットボックスの作成
    #
    ev = tk.StringVar(value="0.000")
    tk.Entry(f, textvariable=ev, justify=tk.CENTER, width=6, font=("", 12)
                ).grid(row=r, column=c, sticky=tk.NSEW)
    #
    # エディットボックスのラベルを表示するボタンの作成
    #
    bt = tk.Button(f, text=t, justify=tk.CENTER, width=6, height=2,
                    command=lambda:sndSpeed(float(guiApp.lin.get()),
                                            float(guiApp.arg.get()),
                                            float(guiApp.psl.get()),
                                            float(guiApp.psa.get())))
    bt.grid(row=r+1, column=c, sticky=tk.NSEW)
    bt.configure(bg=b)
    return ev


#==============================================================================
# ３．ラベルをクリックした時に速度情報を送信するコールバック関数：sndSpeed(x,z,px,pz)
#   ＜引数  x：更新する並進速度情報[m/s]＞
#   ＜引数  z：更新する回転速度情報[rad/s]＞
#   ＜引数 px：更新する並進速度のプリセット値[m/s]＞
#   ＜引数 pz：更新する回転速度のプリセット値[rad/s]＞
#------------------------------------------------------------------------------
#　・他のメイン処理からライブラリとしてインポートされたときに
#　　左右のテキストボックスに表示されている速度情報を送信するサポート関数
#==============================================================================
def sndSpeed(x, z, px, pz):
    guiApp.stp.focus_set()      # フォーカスをテキストボックスからボタンに移動
    setSpeed(x, z, px, pz)
    sndSpeed.callbackSpeed(x, z, px, pz)


#==============================================================================
# ４．GUIを構成する実質のメイン処理関数：guiApp()
#------------------------------------------------------------------------------
#　・メインウィンドを作成
#　・左右と中央にGUIのパーツを配置するフレームを作成
#　・並進速度と回転速度を表示するエディットボックスとボタンを配置する
#　・実行は、ここで停止しGUIのイベント処理を行う
#==============================================================================
def guiApp():
    #
    # メインウィンドを作成
    #
    root = tk.Tk()
    root.title('ラジコン・カーのリモコンをＲＯＳ化する　Ver.2.0')   # 画面のタイトル
    root.geometry('+0+0')                   # 画面を左上に固定
    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)
    #
    # 左右と中央にGUIのパーツを配置するフレームを作成
    #
    fr = labelFrame(root, "リモコンの速度状況", 0)
    #
    # 並進速度と回転速度を表示するエディットボックスとボタンを配置する
    # ・並進速度と回転速度のプリセット用エディットボックスとボタンを配置(ver2.0)
    #
    guiApp.psa = editButton(fr, 0, 0, '回転速度\nプリセット', 'aqua')
    guiApp.arg = editButton(fr, 0, 1, '回転速度\n[rad/s]', 'LightGray')
    guiApp.stp = tk.Button(fr, text='緊急\n停止', justify=tk.CENTER, width=2,
                            height=1, command=lambda:sndSpeed(0.0, 0.0,
                            float(guiApp.psl.get()), float(guiApp.psa.get())))
    guiApp.stp.grid(row=0, rowspan=2, column=2, sticky=tk.NSEW)
    guiApp.stp.configure(bg="HotPink")
    guiApp.lin = editButton(fr, 0, 3, '並進速度\n[m/s]', 'LightGray')
    guiApp.psl = editButton(fr, 0, 4, '並進速度\nプリセット', 'aqua')
    #
    # 実行は、ここで停止しGUIのイベント処理を行う
    #
    #root.update_idletasks()
    #print root.geometry(), root.winfo_width(), root.winfo_height(), root.winfo_x(), root.winfo_y()
    root.mainloop()


#==============================================================================
# ５．現在速度のテキストボックスに表示するセッター関数：setSpeed(x,z,px,pz)
#   ＜引数  x：更新する並進速度情報[m/s]＞
#   ＜引数  z：更新する回転速度情報[rad/s]＞
#   ＜引数 px：更新する並進速度のプリセット値[m/s]＞
#   ＜引数 pz：更新する回転速度のプリセット値[rad/s]＞
#------------------------------------------------------------------------------
#　・他のメイン処理からライブラリとしてインポートされたときに
#　　左右のテキストボックスに速度情報を表示するサポート関数
#==============================================================================
def setSpeed(x, z, px, pz):
    guiApp.lin.set("%6.3f" % x)     # 並進速度情報
    guiApp.arg.set("%6.3f" % z)     # 回転速度情報
    guiApp.psl.set("%6.3f" % px)    # 並進速度情報
    guiApp.psa.set("%6.3f" % pz)    # 回転速度情報


#==============================================================================
# ６．速度情報が変更されたときに通知する関数を設定する関数：setCallbackSpeed(fn)
#   ＜引数 fn：通知するコールバック関数＞
#------------------------------------------------------------------------------
#　・他のメイン処理からライブラリとしてインポートされたときに
#　　速度情報設定値がGUIで変更されたときに通知するコールバック関数を設定する
#==============================================================================
def setCallbackSpeed(fn):
    sndSpeed.callbackSpeed = fn


#==============================================================================
# ７．速度情報がコールバック設定されて無い時にprintで代用する関数：prints(x,z,px,pz)
#   ＜引数  x：更新する並進速度情報[m/s]＞
#   ＜引数  z：更新する回転速度情報[rad/s]＞
#   ＜引数 px：更新する並進速度のプリセット値[m/s]＞
#   ＜引数 pz：更新する回転速度のプリセット値[rad/s]＞
#------------------------------------------------------------------------------
#　・python2ではprint文をコールバックできないので、ワンクッション関数
#==============================================================================
def prints(x, z, px, pz):
    print x, z, px, pz


#==============================================================================
# ８．メイン処理関数：main()
#------------------------------------------------------------------------------
#　・他のメイン処理からライブラリとしてインポートされたときに
#　　guiApp()のみを呼び出せばよいように、main()からワンクッション置いた
#==============================================================================
def main():
    #
    # コールバック関数が設定されていないときはprint文で代用
    #
    sndSpeed.callbackSpeed = prints # python2ではprint文をコールバックできないので
    guiApp()

#------------------------------------------------------------------------------
# このファイルから起動時のみ実行する
#------------------------------------------------------------------------------
if __name__ == "__main__":
    main()
